<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">
  <a name="requests"> </a>
  <h2>Tasks vs. other Requests</h2>
  <p>
    While Task can be used to seek fulfillment of other authorizations such as <a href="servicerequest.html">ServiceRequests</a>, 
    <a href="medicationrequest.html">MedicationRequests</a>, etc., Task can also be used on its own to solicit action without any 
    prior authorization.  However, such requests for action should be tightly time-bound and be satisfied with a single 'event'.  
    I.e. they should ask as a task-list checkbox that can easily be marked as complete.  Any action that requires ongoing repeated 
    performance should be captured using a different type of resource, not Task.
  </p>
  <a name="titles"> </a>
  <h2>Task Titles</h2>
  <p>
     Tasks often have titles (eg "My Tasks", "Outstanding Tasks for Patient X") which can be presented in a list.  The task title should go into the Task.code as a coded concept and/or text.
  </p>
  <a name="statemachine"> </a>
  <h2>Task state machine</h2> 
    <p>Tasks start in a Created state. Once they have been assigned to an owner they transition to
      the Ready state, indicating that they are ready to be performed. Once the owner initiates
      activity on the task, the task transitions to the In Progress state, indicating that work is
      being performed. Upon normal completion, the task enters the Completed state. If there is a
      failure during the task execution that prevents the task from being completed, it can also
      enter a Failed state, indicating an abnormal termination of the task. A task in any
      non-terminal state may also be Cancelled, representing an abnormal termination of the task due
      to external forces, rather than an error condition.</p>
    <p>Tasks in any non-terminal state (Created, Ready, In Progress) can be suspended and resumed.
      When a task is suspended, it is typically resumed in the state it was in when it was
      originally suspended. Suspending a task suspends all of its children as well. Resuming a task
      resumes all of its children.</p>
    <p>An In-progress task can also be stopped, returning it to a Ready state. This may be in
      preparation for delegation or reassignment (e.g., because it cannot be completed by the
      current owner), to restart a task due to a temporary failure (e.g., to reattempt completion of
      the activity), or in preparation to allow others to claim the task.</p>
<!--    <h3>Using Tasks with operations</h3>
    <p>The Task resource defines several operations to enable rich control over the task execution
      environment. A server managing task resources may allow unfettered read access to all tasks
      that it maintains, but restrict write access to the task resources to itself in order to exert
      control over the task state machine. Instead, it might offer operations on tasks that enable
      strictly controlled write operations following commonly accepted business rules for task
      management. For example, only tasks that are in the "In Process" state might be allowed to be
      "Completed" or "Failed". Use or support of these operations is not essential in simple
      workflow environments where task activity needs little management. </p>
    <p>There is no distinct operation for creating a new task because the FHIR RESTful API already
      distinguishes between the create and update operations.</p>-->
    <p>The task history allows applications monitoring the state of a workflow to identify tasks
      that are long running, perhaps stuck in some queue, to enable management activities that could
      ensure completion. It also enables tracking of task statistics such as wait time, or time in
      progress, or time to completion, enabling capture of important task metrics in support of
      optimization and quality improvement. </p> 
  <p>
    The following diagram reflects the "typical" state machine for Task.  Note that not all states will be supported by all workflows
    and that some workflows may support additional transitions, including transitions from terminal states (e.g. back to "in-progress"
    from "failed" or "completed").
  </p>
  <img src="task-state-machine.svg" alt="Diagram showing typical state machine for the Task resource"/>
  <p/>
  [%stu-note dstu%]
      Currently, task pre-requisites can be represented using Task's `description` element or the <a href="requestorchestration.html">RequestOrchestration</a> resource. We are seeking input from the implementer community in evaluating whether there is need for adding another mechanism to this resource for this purpose.
      </p>
      <p>
      Feedback <a href="https://chat.fhir.org/#narrow/stream/103-Orders-and.20Observation.20WG">here</a>.
      [%end-note%]
  <p/>
  <a name="cancelled"> </a>
  <h2>The Cancelled state</h2>
  <p>
    While the intention of a "cancelled" task is that all work authorized by the task should cease, this
    might not always be possible practice.  It is possible that the originally requested action could still
    be completed and still attached to the Task but this would not change the status of the task.  If the
    placer cancels a task, it signals they no longer care about the outcome of the task.
  </p>
</div>
