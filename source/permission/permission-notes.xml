<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<!-- insert xhtml content here -->
<a name="Logic"> </a>
<h3>Composite Permissions</h3>
<p>
In some cases, there are common components across different <code>Permission</code> rules and repeating those common rules could lead 
to redundancy which in turn could lead to the risk on inconsistency, if the common components are not formulated precisely in the same manner. 
Therefore, it is desirable to have a mechanism to define a common set of rules and refer to them in a single <code>Permission</code> resources.
The <code>import</code> attribute enables pointing to such common rules by referencing the <code>Permission</code> resource.
</p>
<p>
If the <code>import</code> attribute is used in rule, the <code>rule</code> element shall not contain any other elements. 
The result of evluating a rule with an <code>import</code> is defined to be the result of evaluating the referenced <code>Permission</code> resource.
The decision from that evaluation will then be combined with the decision from the other rues based on the combining algorithm 
specified in the <code>combining</code> element.
</p>
<p>
If the referenced <code>Permission</code> is not active or expired, this should be interpreted as returning a <code>not-applicable</code> decision 
because the referenced permission is silent about whether access should be permitted or denied in the given context.
</p>
<p>
A circular reference in processing linked Permissions should be treated as an error, leading to a <code>not-applicable</code> 
decision bubbling up from the <code>Permission</code> resource in which the circular reference was encountered.
</p>

<p>
Implementers shoud rely on pragmatic limits on the length of the chain of linked <code>Permission</code> and put in place
reasonable guardrails against (maliciously or erroneously) large chains that could lead to draining of resources at the time of processing.
</p>

<h3>Rules Processing Logic</h3>
<!-- These rules are repeated on the comment element within the StructureDefinition -->
<p>
Each <code>.rule</code> is evaulated within the combining rule identified in the <code>.combining</code> element.
</p>
<p>
    Within a <code>.rule</code> any repititions of the <code>.data</code> element are in an OR relationship. That is to say that the data identified by the rule is all the data identified by all repititions of <code>.data</code>. Thus to identify one rule that applies to data tagged with <code>STD</code> and data that is tagged with <code>HIV</code>, one would repeat this at the <code>.data</code> level.
</p>
<p>
    Within a <code>.rule</code> any repititions of the <code>.activity</code> element are in an OR relationship. That is to say that the rule applies to all the repititions of <code>.activity</code>. Thus to identify one rule that applies to both <code>TREAT</code> and <code>HOPERAT</code>, one would have one rule with repititions at the .activity level.
</p>
<p>
    Within a <code>.rule</code> all repititions of the <code>.limit</code> all apply to the rule. That is to say if there are multiple limits, and the rule permits the activity, then all the identified limits are applied to that authorized activity. 
</p>
<p>
    Within the <code>.data</code> element, all elements and all repetitions of elements, are in an AND relationship. Thus to select data that has both <code>STD</code> and <code>HIV</code> one puts both into one <code>.rule</code>. To have different rules for <code>STD</code> from <code>HIV</code>, one would need to have two <code>.rule</code> elements. To have a rule that applies to both, those that have just <code>STD</code> and just <code>HIV</code>, this repitition may also be done at the data level as described above.
</p>
<p>
    Within the <code>.activity</code> element, all elements and all repetitions of elements, are in an AND relationship. Thus to control an actity that is covering purpose of both <code>TREAT</code> and <code>HOPERAT</code>, one rule with an <code>.activity</code> <code>.purpose</code> holding both <code>TREAT</code> and <code>HOPERAT</code> can define that rule. However this will not cover activities covering only <code>TREAT</code>, for that repeat at the <code>.activity</code> with just a <code>.purpose</code> of <code>TREAT</code>.
</p>
</div>
